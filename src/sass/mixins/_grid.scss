// GRID SYSTEM
// ----------------------------
@mixin guttered($gutter: $grid__gutter-width) {
	padding-left: $gutter * .5;
	padding-right: $gutter * .5;
}

// Centered container element
@mixin container($gutter: $grid__gutter-width, $width: $grid__width) {
	@include guttered($gutter);
	max-width: $width;
	margin-left: auto;
	margin-right: auto;
}

@mixin container--left {
	margin-left: 0;
}

@mixin container--right {
	margin-right: 0;
}

@mixin row-gutters($gutter: $grid__gutter-width) {
	margin-left: $gutter * -.5;
	margin-right: $gutter * -.5;
}

@mixin col($gutter: $grid__gutter-width) {
	position: relative;
	width: 100%;
	max-width: 100%;
	@include guttered($gutter);
}

@mixin row($gutter: $grid__gutter-width) {
	display: flex;
	flex-wrap: wrap;
	@include row-gutters($gutter);

	& > * {
		@include col($gutter);
	}
}

@mixin form-row {
	@include row($form-grid__gutter-width);
}

@mixin gallery-row {
	@include row($gallery-grid__gutter-width);
}

@mixin row--centered {
	text-align: center;
	justify-content: center;
}

@mixin cols($n, $columns: $grid__columns) {
	$calc: math.div($n, $columns) * 100%;
	max-width: $calc;
	flex: 0 0 $calc;
}

@mixin push($offset: 1, $columns: $grid__columns) {
	margin-left: math.div($offset, $columns) * 100%;
}

@mixin pull($offset: 1, $columns: $grid__columns) {
	margin-right: math.div($offset, $columns) * 100%;
}

@mixin col--grow {
	flex-basis: 0;
	flex-grow: 1;
}

@mixin col--auto {
	flex: 0 0 auto;
	width: auto;
}

@mixin col--centered {
	margin-left: auto;
	margin-right: auto;
}

@mixin uncol {
	width: auto;
	padding-left: initial;
	padding-right: initial;
}

@mixin unpush {
	margin-left: 0;
}

@mixin unpull {
	margin-right: 0;
}

@mixin valcols($n, $column-total-width: $grid__column-total-width) {
	max-width: $n * $column-total-width;
}

@mixin valpush($n, $column-total-width: $grid__column-total-width) {
	margin-left: $n * $column-total-width;
}

@mixin valpull($n, $column-total-width: $grid__column-total-width) {
	margin-right: $n * $column-total-width;
}

// make element in column break wider
// align can be 'left', 'center', or 'right'
@mixin break-columns($n, $parent-n, $gutter: $grid__gutter-width, $align: 'center') {
	$width: ($grid__column-total-width * $n) - $gutter;
	$parent-width: ($grid__column-total-width * $parent-n) - $gutter;
	$difference: $width - $parent-width;

	width: math.div($width, $parent-width) * 100%;

	@if ($align == 'right') {
		margin-left: math.div($difference, $parent-width * -1) * 100%;

	} @else if ($align == 'center') {
		margin-left: math.div($difference * -.5, $parent-width) * 100%;
	}
}

@mixin generate-cols-classes($columns: $grid__columns, $selector-type: '%', $selector-name: 'cols', $prefix: '') {
	$i: 1;
	@while $i <= $columns {

		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include cols($i, $columns);
		}
		$i: $i + 1;
	}
}

@mixin generate-push-classes($columns: $grid__columns, $selector-type: '%', $selector-name: 'push', $prefix: '') {
	$i: 1;
	@while $i <= $columns {
		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include push($i, $columns);
		}
		$i: $i + 1;
	}
}

@mixin generate-pull-classes($columns: $grid__columns, $selector-type: '%', $selector-name: 'pull', $prefix: '') {
	$i: 1;
	@while $i <= $columns {
		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include pull($i, $columns);
		}
		$i: $i + 1;
	}
}

// BLOCK GRID
@mixin generate-block-grid-classes($n, $parent-selector: '.block-grid', $parent-modifier-selector: '.block-grid', $child_selector: '.col', $gutter: $grid__gutter-width) {
	$i: 1;
	#{$parent-selector} {
		@include row($gutter);
	}

	@while $i <= $n {
		$calc: math.div(1, $i) * 100%;
		#{$parent-modifier-selector}-#{$i} {
			//& > #{$child-selector} {
			#{$child-selector} {
				max-width: $calc;
				flex: 0 0 $calc;

			}
		}
		$i: $i + 1;
	}
}

// GRID BREAKPOINT CLASSES
// $selector-type expects '.' (outputs classes) or '%' (outputs placeholders)
@mixin grid-classes($selector-type: '.', $prefix: null) {
//	#{$selector-type}#{$prefix}guttered { @include guttered; }
//	#{$selector-type}#{$prefix}container { @include container; }
//	#{$selector-type}#{$prefix}container--left { @include container--left; }
//	#{$selector-type}#{$prefix}container--right { @include container--right; }
//	#{$selector-type}#{$prefix}row { @include row; }
//	#{$selector-type}#{$prefix}form-row { @include form-row; }
//	#{$selector-type}#{$prefix}row--centered { @include row--centered; }
//	#{$selector-type}#{$prefix}col { @include col; }
//	#{$selector-type}#{$prefix}form-col { @include form-col; }
//	#{$selector-type}#{$prefix}col--auto { @include col--auto; }
	@include generate-cols-classes($grid__columns, $selector-type, 'cols', $prefix);
	@include generate-push-classes($grid__columns, $selector-type, 'push', $prefix);
	@include generate-pull-classes($grid__columns, $selector-type, 'pull', $prefix);
	#{$selector-type}#{$prefix}col--grow { @include col--grow; }
	#{$selector-type}#{$prefix}col--auto { @include col--auto; }
	#{$selector-type}#{$prefix}col--centered { @include col--centered; }
	#{$selector-type}#{$prefix}uncol { @include uncol; }
	#{$selector-type}#{$prefix}unpush { @include unpush; }
	#{$selector-type}#{$prefix}unpull { @include unpull; }
}

@mixin bp-grid-classes($selector-type: '.') {
	@each $name, $value in $breakpoints {
		@if $value == 0 {
			@include grid-classes($selector-type);

		} @else {
			$prefix: bp-#{$name}__;
			@include breakpoint-up($value) {
				@include grid-classes($selector-type, $prefix);
			}
		}
	}
}





